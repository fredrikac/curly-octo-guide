Lesson 1: variables
	Classic way to declare variable as strings
	var nameOne string = "mario"
	var nameTwo = "luigi"
	var nameThree string // setting up the variable for future use. Does not have a given value at this point.

	fmt.Println(nameOne, nameTwo, nameThree)
	// change the value of a variable
	nameOne = "peach"
	nameThree = "bowser"
	fmt.Println(nameOne, nameTwo, nameThree)

	// Shorthand variable declaration. Cannot be used outside of a function.
	nameFour := "yoshi" // shorthand variable declaration. Go will automatically infer the type of the variable.
	fmt.Println(nameFour)

	Two types for numbers: integers and floats
	ints - whole numbers only
	var ageOne int = 20
	var ageTwo = 30
	ageThree := 40

	fmt.Println(ageOne, ageTwo, ageThree)

	// bits and memory: 8, 16, 32, 64 bits
	// var numOne int8 = 25 // 8 bits = 1 byte. A specific range of values.
	// var numTwo int8 = -128
	// var numThree uint8 = 25 // cannot have a negative value. uint can go extra high - double the positive range. 128 to 255.

	// float - decimal numbers
	var scoreOne float32 = 25.98         // we have to specify the bitsize for floats.
	var scoreTwo float64 = 3243543543.98 // can be stupidly large. Slightly higher precision. Use this most of the time.
	scoreThree := 1.5                    // Go will automatically infer the type of the variable to float64.


	// Lesson 2: formatting strings

	age := 33
	name := "John Doe"

	// Print
	fmt.Print("Hello, ") // fmt.Print() has one difference from fmt.Println(). It does not add a newline character at the end of the string.
	fmt.Print("World! \n")
	fmt.Print("new line \n")

	// Println
	// does the same thing but adds newline character at the end of the string
	fmt.Println("Goodbye World!")
	fmt.Println("my age is", age, "and my name is", name)

	// Printf (Formatted strings)
	fmt.Printf("My age is %d and my name is %s \n", age, name) 
	%d is a placeholder for an integer, %s is a placeholder for a string. Order matters.
	%v is a placeholder for a value. It can be used to print any type of value.
	%T is a placeholder for the type of a value.
	%f is a placeholder for a float value.
	%t is a placeholder for a boolean value.
	%c is a placeholder for a character.
	%x is a placeholder for a hexadecimal value.
	%b is a placeholder for a binary value.
	%e is a placeholder for a scientific notation value.
	%p is a placeholder for a pointer value.
	%q is a placeholder for a quoted string value.
	%U is a placeholder for a Unicode value.
	%o is a placeholder for an octal value.
	%x is a placeholder for a hexadecimal value.
	%X is a placeholder for a hexadecimal value in uppercase.
	%q is a placeholder for a quoted string value.

	// Sprintf (save formatted strings)
	var str = fmt.Sprintf("My age is %d and my name is %s \n", age, name)
	fmt.Println("The saved string is:", str)

		// Lesson 3: Arrays and slices
	// var ages [3]int = [3]int{20, 25, 30} // Array declaration. Arrays are fixed in size and cannot be resized. The size of an array is part of its type.
	// The above array is of size 3 and can only store integers. The values are initialized to 20, 25, and 30.

	var ages = [3]int{20, 25, 30}                           // The type of the array can be inferred from the values.
	names := [4]string{"yoshi", "mario", "peach", "bowser"} // The type of the array can be inferred from the values.
	names[1] = "luigi"                                      // Change the value at index 1 to "luigi"

	fmt.Println(ages, len(ages))   // [20 25 30] 3
	fmt.Println(names, len(names)) // [yoshi mario peach bowser] 4

	// Slices - more like typical arrays in other languages (use arrays under the hood)
	var scores = []int{100, 50, 60} // Slice declaration. Slices are dynamic arrays. They can grow and shrink in size.
	scores[2] = 25                  // Change the value at index 2 to 25
	// append(scores, 85)              // Append a value of 85 to the slice. Does not change the original slice. Returns a new slice.
	scores = append(scores, 85) // Append a value of 85 to the slice. Changes the original slice.
	fmt.Println(scores, len(scores))

	// Slice ranges
	rangeOne := names[1:3]                      // Slice range. This creates a new slice from the original slice. The new slice will contain elements at index 1 and 2. Inclusive of the first number, but not the second.
	rangeTwo := names[2:]                       // Slice range. This creates a new slice from the original slice. The new slice will contain elements from index 2 to the end of the slice.
	rangeThree := names[:3]                     // Slice range. This creates a new slice from the original slice. The new slice will contain elements from the start of the slice to index 2.
	fmt.Println(rangeOne, rangeTwo, rangeThree) // [luigi peach] [peach bowser]

	rangeOne = append(rangeOne, "koopa") // Append a value of "koopa" to the rangeOne slice. Changes the original slice.
	fmt.Println(rangeOne)                // [luigi peach koopa] [yoshi luigi peach bowser]

	Lesson 4 - Packages
	Go is very lightweight. 
	fmt for strings. 
	Import only the functionality you need. 

	// greeting := "Hello, World!"
	// Returns true if the string contains the substring
	// fmt.Println(strings.Contains(greeting, "Hello"))
	// Does not alter the original string, just returns a new string
	// fmt.Println(strings.ReplaceAll(greeting, "Hello", "Hi"))
	// fmt.Println(strings.ToUpper(greeting))
	// fmt.Println(strings.Index(greeting, "W"))
	// fmt.Println(strings.Split(greeting, " ")) // will split the string into a slice of strings

	// the original is unchanged
	// fmt.Println("original string:", greeting)

	ages := []int{45, 20, 35, 30, 75, 60, 50, 25}
	sort.Ints(ages)
	fmt.Println(ages)

	index := sort.SearchInts(ages, 30) // first argument is the slice, second is the value to search for
	fmt.Println(index)
	// if the element is not found, it will return the index where the element should be inserted

	names := []string{"yoshi", "mario", "peach", "luigi", "bowser"}
	sort.Strings(names)
	fmt.Println(names)

	fmt.Println(sort.SearchStrings(names, "bowser"))


		// greeting := "Hello, World!"
	// Returns true if the string contains the substring
	// fmt.Println(strings.Contains(greeting, "Hello"))
	// Does not alter the original string, just returns a new string
	// fmt.Println(strings.ReplaceAll(greeting, "Hello", "Hi"))
	// fmt.Println(strings.ToUpper(greeting))
	// fmt.Println(strings.Index(greeting, "W"))
	// fmt.Println(strings.Split(greeting, " ")) // will split the string into a slice of strings

	// the original is unchanged
	// fmt.Println("original string:", greeting)

	ages := []int{45, 20, 35, 30, 75, 60, 50, 25}
	sort.Ints(ages)
	fmt.Println(ages)

	index := sort.SearchInts(ages, 30) // first argument is the slice, second is the value to search for
	fmt.Println(index)
	// if the element is not found, it will return the index where the element should be inserted

	names := []string{"yoshi", "mario", "peach", "luigi", "bowser"}
	sort.Strings(names)
	fmt.Println(names)

	fmt.Println(sort.SearchStrings(names, "bowser"))


	Loops in go
	for is keyword for all kind of Loops

	// Traditional for loop
	// for i := 0; i < 5; i++ {
	// 	fmt.Println("value of i is: ", i)
	// }

	names := []string{"John", "Doe", "Jane", "Doerr"}

	// for i := 0; i < len(names); i++ {
	// 	fmt.Println(names[i])
	// }

	// Cycle through a slice
	for index, value := range names {
		fmt.Printf("Index: %d, Value: %s\n", index, value)
	}

	// if we don't need the index, we can use the _ to ignore it
	// value here is kind of a copy of the value in the array. Does not alter the value inside the original slice
	for _, value := range names {
		fmt.Printf("Value: %s\n", value)
		value = "new value"
	}

// Booleans in go
conditionals - if else statements
continue and break keyword

	names := []string{"John", "Paul", "George", "Ringo", "Pete"}

	for index, value := range names {
		if index == 1 {
			fmt.Printf("continuing at pos %v\n", index)
			continue
		}
		if index > 2 {
			fmt.Printf("breaking at pos %v\n", index)
			break
		}
		fmt.Printf("the value at pos %v is %v\n", index, value)
	}

	results in: 
	the value at pos 0 is John
	continuing at pos 1
	the value at pos 2 is George
	breaking at pos 3


	// Functions in go
	Functions outside of main func can be used inside main func, but also in other go files. 
	Declare the parameter type inside the function. 

	func sayGreeting(n string) {
	fmt.Printf("Good morning %v\n", n)
	}

single letter characters in functions, n, r, f, etc

// we must specify the type of the function and the type of the return value
func circleArea(r float64) float64 {
	return math.Pi * r * r
}

	// only passing the function name, otherwise it will be executed
	cycleNames([]string{"Mario", "Luigi", "Peach"}, sayGreeting)
	cycleNames([]string{"Mario", "Luigi", "Peach"}, sayBye)

	a1 := circleArea(10.5)
	a2 := circleArea(15)
	fmt.Println(a1, a2)
	fmt.Printf("Circle 1 is %0.3f and Circle 2 is %0.3f\n", a1, a2)

	// Multiple return values
	func getInitials(n string) (string, string) {
	// capitalize the string
	s := strings.ToUpper(n)
	// split the string into words. Splits the string s into a slice of substrings separated by spaces
	names := strings.Split(s, " ")
	// create another slice for initials
	var initials []string
	// loop through the names slice
	for _, v := range names {
		// append the first letter of each name to the initials slice
		// the [:1] is a slice expression that returns the first character of the string
		initials = append(initials, v[:1])
	}

	// check the items in the initials slice
	if len(initials) > 1 {
		return initials[0], initials[1]
	}

	return initials[0], "_"
}

func main() {
	// we need 2 variables to store the initials
	fn1, sn1 := getInitials("tifa lockhart")
	fmt.Println(fn1, sn1)
	fn2, sn2 := getInitials("cloud strife")
	fmt.Println(fn2, sn2)
	fn3, sn3 := getInitials("zelda")
	fmt.Println(fn3, sn3)

}

// Package scopes
Include package main in the top of the file. It makes it accessible to the main func. 
However, when accessing variables or using functions from other files, you must also run those files in the command line. 
like this: go run main.go greetings.go
It works the other way also! If it's declared at the root level. Variables and functions declared inside main is not accessible.

// Maps in go 
A bit like objects in js. Key-value-pairs. All of the keys in a single map must have the same type. The values must also have the same types. 
You can update the values in a map. 

	menu := map[string]float64{
		"soup":           4.99,
		"pie":            7.99,
		"salad":          6.99,
		"toffee pudding": 3.55,
	}

	fmt.Println(menu)
	// get the value from one of the keys: pass in a string matching the key
	fmt.Println(menu["pie"])

	// loop through the map: key and value, not index
	for k, v := range menu {
		fmt.Println(k, "-", v)
	}

	// ints as key type
	phonebook := map[int]string{
		267584967: "mario",
		938267892: "luigi",
		287456782: "peach",
	}

	fmt.Println(phonebook)
	fmt.Println(phonebook[938267892])

	// update item in map
	phonebook[938267892] = "bowser"
	fmt.Println(phonebook)


// Pass-by-value languages
Go makes copies of values when passed into functions - what does that means for us?

Group A: strings, ints, floats, booleans, arrays, structs
Group B: slices, maps, functions

Other types exist too. 

Every time we pass a value to a function, go creates a copy of the value. 

Computer memory and storage
Each block can store a single value. Has a unique adress. 
When we create a variable, we store the value in a block that gets the variable name as memory adress.
Another variable is stored in another block, and so on.
When we pass a value into a function, go copies that. So if we change the value we passed into the function inside the function, 
it is the copy that is changed - not the original value.

If we want to alter the value, we must return a value. 

** Group A example **
This won't work: 
func updateName(x string) {
	x = "wedge"
}

func main() {
	name := "tifa"

	updateName(name)
	fmt.Println(name)
}

This will: 
func updateName(x string) string {
	x = "wedge"
	return x
}

func main() {
	name := "tifa"

	name = updateName(name)
	fmt.Println(name)
}

** Group B example **
This works!!
func updateMenu(y map[string]float64) {
	y["coffee"] = 2.99
}

func main() {
	// group B types -> slices, maps, functions
	menu := map[string]float64{
		"pie":       5.95,
		"ice cream": 3.99,
	}

	updateMenu(menu)
	fmt.Println(menu)
}

The function has added the coffee item to the map and thus changed the original value of the map. 
When we create a variable of type B, go does 2 things: first, it stores the underlying data in memory in its own block. Then it stores a value, which contains a pointer, in another block.
Essentially, the value is split up into multiple memory locations. 
Pointers point to another memory location (more on this later).

When we pass a type B value to a function, go still makes a copy. 
It copies the pointer, which points to the actual values, which are still in the same place. 
That's why when you use a function to change a map, the pointer-copy will point to the original values and change them. 

Group A: Non-pointer values
Group B: Pointer Wrapper values

Pointers
Pointers to the underlaying data stored in memory. 

Pointers are datatypes of themselves, stored in their own block. 
You can store a pointer in a variable, by adding an ampersand &. 

m := &name 
	fmt.Println("memory address; ", m)
	fmt.Println("value at memory address: ", *m) // asterisk in front of m gets the value at the memory address

Pass in pointer to a function to access the original underlaying data 

Structs - instead of classes
Another type. A kind of blueprint that describes some kind of data

Rule of thumb: whenever we create a function to update a value, we pass in a pointer

We don't want to make a copy of the object every time, it's a lot of work. It is less work to pass in a pointer, bc a pointer is just a pointer, while data objects can be very large

18. User input
Ask question in terminal to user and give them options
1. create a reader using the bufio package
2. Read the user input with ReadString method and specify how long you want to read (until user press enter)

User input is automatically strings
Read userinput several times
Helperfunction to do this 

19. Switch statements
Just like any other language!
switch, case, default

20. Parsing floats
21. Save data to file
Must be saved in byte slices format

22. Interfaces
Type: square and circle
Two methods returning float64s
Print out the information of the format
Interface groups types together with their common methods
Makes it possible to create general functions 

